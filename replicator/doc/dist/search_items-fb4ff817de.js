searchNodes=[{"doc":"A replicator menu item.","ref":"MenuItem.html","title":"MenuItem","type":"module"},{"doc":"Create a new %MenuItem{...} . Parameters enenergy_cost: The amount of replicator charge it costs to replicate one of the item. icon: An icon to represent the item, ideally an emoji. Returns Returns a new %MenuItem{...} . Returns nil if passed invalid parameters.","ref":"MenuItem.html#new/2","title":"MenuItem.new/2","type":"function"},{"doc":"The charge amount for an item. The amount of replicator charge it costs to replicate a given item. Must be greater than 0.","ref":"MenuItem.html#t:charge_amount/0","title":"MenuItem.charge_amount/0","type":"type"},{"doc":"A menu item. Properties enenergy_cost: The amount of replicator charge it costs to replicate one of the item. icon: An icon to represent the item, ideally an emoji.","ref":"MenuItem.html#t:t/0","title":"MenuItem.t/0","type":"type"},{"doc":"Why cook when you can use a replicator! Sadly this module can't provide a real replicator, but it can at least give you a simulated digital one. üôÇ A Virtual Star Trek-style Replicator Replicators have a charge that gets exhausted by replicating food. Replicators can be recharged. All replicators share a single menu which is accessible and updatable via functions.","ref":"PBSReplicator.html","title":"PBSReplicator","type":"module"},{"doc":"Add a MenuItem to the replicator's menu. Parammeters: replicator - The replicator to recharge. {name, icon, energy_cost} - A Tuple of the name, icon, and energy cost of the new item. Sample: iex&gt; { :ok , rep } = PBSReplicator . add_menu_item ( rep , { :tako , &quot;üêô&quot; , 9 } ) { :ok , % PBSReplicator { charge : 225 , menu : %{ pancakes : % MenuItem { energy_cost : 11 , icon : &quot;ü•û&quot; } , popcorn : % MenuItem { energy_cost : 1 , icon : &quot;üçø&quot; } , tako : % MenuItem { energy_cost : 9 , icon : &quot;üêô&quot; } , waffles : % MenuItem { energy_cost : 15 , icon : &quot;üßá&quot; } } } }","ref":"PBSReplicator.html#add_menu_item/2","title":"PBSReplicator.add_menu_item/2","type":"function"},{"doc":"","ref":"PBSReplicator.html#charge/2","title":"PBSReplicator.charge/2","type":"function"},{"doc":"Get the replicator's current charge level. Parammeters: replicator - The replicator to check. Sample: iex&gt; { :ok , charge } = PBSReplicator . get_charge ( rep ) { :ok , 150 }","ref":"PBSReplicator.html#get_charge/1","title":"PBSReplicator.get_charge/1","type":"function"},{"doc":"Get the menu of foods supported by the replicator. Parammeters: replicator - The replicator to get the menu from. Sample: iex&gt; { :ok , menu } = PBSReplicator . get_menu ( rep ) { :ok , %{ pancakes : % MenuItem { energy_cost : 11 , icon : &quot;ü•û&quot; } , popcorn : % MenuItem { energy_cost : 1 , icon : &quot;üçø&quot; } , waffles : % MenuItem { energy_cost : 15 , icon : &quot;üßá&quot; } } }","ref":"PBSReplicator.html#get_menu/1","title":"PBSReplicator.get_menu/1","type":"function"},{"doc":"Create a default-charged Replicator. Sample: iex&gt; { :ok , rep } = PBSReplicator . new ( ) { :ok , % PBSReplicator { charge : 100 , menu : %{ pancakes : % MenuItem { energy_cost : 11 , icon : &quot;ü•û&quot; } , popcorn : % MenuItem { energy_cost : 1 , icon : &quot;üçø&quot; } , waffles : % MenuItem { energy_cost : 15 , icon : &quot;üßá&quot; } } } }","ref":"PBSReplicator.html#new/0","title":"PBSReplicator.new/0","type":"function"},{"doc":"Create a new Replicator charged to a given amount. Replicators default to an initial charge of 100, but an alternative initial charge may be passed. Parammeters: initial_charge (default: 100) - The replicator's initial charge. Sample: iex&gt; { :ok , rep } = PBSReplicator . new ( 150 ) { :ok , % PBSReplicator { charge : 150 , menu : %{ pancakes : % MenuItem { energy_cost : 11 , icon : &quot;ü•û&quot; } , popcorn : % MenuItem { energy_cost : 1 , icon : &quot;üçø&quot; } , waffles : % MenuItem { energy_cost : 15 , icon : &quot;üßá&quot; } } } }","ref":"PBSReplicator.html#new/1","title":"PBSReplicator.new/1","type":"function"},{"doc":"Recharge the replicator's current charge level. Parammeters: replicator - The replicator to recharge. charge_amount - The amount to charge. Sample: iex&gt; { :ok , rep } = PBSReplicator . recharge ( rep , 75 ) { :ok , % PBSReplicator { charge : 225 , menu : %{ pancakes : % MenuItem { energy_cost : 11 , icon : &quot;ü•û&quot; } , popcorn : % MenuItem { energy_cost : 1 , icon : &quot;üçø&quot; } , waffles : % MenuItem { energy_cost : 15 , icon : &quot;üßá&quot; } } } }","ref":"PBSReplicator.html#recharge/2","title":"PBSReplicator.recharge/2","type":"function"},{"doc":"Make some food from the menu. Parammeters: replicator - The replicator to use. {name, count} - A Tuple of the name of the item to make and the number of items (default: 1). Returns Returns the Tuple {:ok, replicator, food} if successful, {:error, reason} if fails. Sample: iex&gt; { :ok , rep , food } = PBSReplicator . replicate ( rep , { :tako , 3 } ) { :ok , % PBSReplicator { charge : 198 , ... ] } , &quot;üêôüêôüêô&quot; }","ref":"PBSReplicator.html#replicate/2","title":"PBSReplicator.replicate/2","type":"function"},{"doc":"","ref":"PBSReplicator.html#t:t/0","title":"PBSReplicator.t/0","type":"type"}]